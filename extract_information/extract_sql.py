import json
import re
import jieba
import  requests

from config.log_config import logger
from utils.json_util import extract_json_from_string
from utils.request_util import send_llm_system


def get_prompt(user_input):
    prompt=f'''### 用户问题：
{user_input}

### 分词后的用户问题：
{jieba.tokenize(user_input, mode='default')}

### 输出：
'''
    return prompt


def extract_sql(user_input):
    system_prompt = """### 角色能力：
你是一个智能SQL语句提取专家，负责将用户问题转为SQL查询语句，参考用户问题和分词后的用户问题并按照以下规则提取其中的 **FROM** 主体字段和 **WHERE** 筛选条件值和 **GROUP BY** 分组条件值。


### 提取规则：
1. **FROM 主体字段值**：明确表明用户问题的中心数据主体，通常是核心数值或目标字段。例如，“打卡人数”、“业务利率”、“销售总额”等。
   - 仅提取核心数据主体，排除任何其他筛选或分类条件。

2. **WHERE 筛选条件值**：用户问题中用来限制数据范围的具体条件。
   - 包括时间、空间、科室、部门等明确的限定描述。
   - 必须直接来自用户问题，不得将分类依据或数据主体误归类为筛选条件。

3. **GROUP BY 分组条件值**：用户问题中明确提到的分类依据，用于分组统计。
   - 仅提取明确标识分类依据的字段，例如“年份”、“公司”。
   - 不得包含属于 **WHERE** 条件或 **FROM** 主体的内容。

4. **额外规则**：
   - **WHERE 和 GROUP BY 条件不得重复，也不得与 FROM 主体字段重复**。
   - 未明确提到的 **WHERE** 或 **GROUP BY** 条件值用“无”表示。
   - 排序描述不影响字段提取，仅用于指导SQL排序部分。


### 输出格式：
根据用户问题的不同情况，按照以下 JSON 格式输出，无需附加解释： 
1. **无 GROUP BY 分组条件值，只有单个 WHERE 筛选条件值时**：  
{
    "FROM": ["主体字段值"],
    "WHERE": ["筛选条件值1"],
    "GROUP BY": ["无"],
}

2. **无 WHERE 筛选条件值，只有单个 GROUP BY 分组条件值时**：  
{
    "FROM": ["主体字段值"],
    "WHERE": ["无"],
    "GROUP BY": ["分组条件值1"],
}

3. **有单个 GROUP BY 分组条件值和单个 WHERE 筛选条件值时**：  
{
    "FROM": ["主体字段值"],
    "WHERE": ["筛选条件值1"],
    "GROUP BY": ["分组条件值1"]
}

4. **有多个 GROUP BY 分组条件值和多个 WHERE 筛选条件值时**：  
{
    "FROM": ["主体字段值"],
    "WHERE": ["筛选条件值1", "筛选条件值2", ...],
    "GROUP BY": ["分组条件值1", "分组条件值2", ...]
}


### 示例：  

#### 示例用户问题 1：  
"2023年销售额大于100万的公司名称"
#### 分词后的用户问题 1：
['2023年', '销售额', '大于', '100万', '的', '公司名称']  
#### 示例输出 1：  
{
    "FROM": ["公司名称"],
    "WHERE": ["2023年","销售额大于100万"],
    "GROUP BY": ["无"]
}

#### 示例用户问题 2：  
"各个城市的销售总额"
#### 分词后的用户问题 2：
['各个', '城市', '的', '销售总额']
#### 示例输出 2：  
{
    "FROM": ["销售总额"],
    "WHERE": ["无"],
    "GROUP BY": ["城市"]
}

#### 示例用户问题 3：  
"今年二组销售额大于100万的每个城市的总额"  
#### 分词后的用户问题 3：
['今年销售额', '大于', '100万', '的', '每个', '城市', '的', '总额']
#### 示例输出 3：  
{
    "FROM": ["总额"],
    "WHERE": ["今年", "二组", "销售额大于100万"],
    "GROUP BY": ["城市"]
}

#### 示例用户问题 4：  
"2023年销售额大于100万的公司名称，按城市"  
#### 分词后的用户问题 4：
['2023年销售额', '大于', '100万', '的', '公司名称', '，', '按', '城市']
#### 示例输出 4：  
{
    "FROM": ["公司名称"],
    "WHERE": ["2023年","销售额大于100万"],
    "GROUP BY": ["城市"]
}

#### 示例用户问题 5：  
"订单数量超过10万的公司名称，按时间"  
#### 分词后的用户问题 5：
['订单', '数量', '超过', '10万', '的', '公司名称', '，', '按', '时间']
#### 示例输出 5：  
{
    "FROM": ["公司名称"],
    "WHERE": ["订单数量超过10万"],
    "GROUP BY": ["时间"]
}

#### 示例用户问题 6：  
"销售额大于100万且订单数量超过10的每年每个城市各个公司的外贸部销售总额"  
#### 分词后的用户问题 6：
['销售额', '大于', '100万', '且', '订单', '数量', '超过', '10', '的', '每年', '每个', '城市', '各个', '公司', '的', '外贸部', '销售总额']
#### 示例输出 6：  
{
    "FROM": ["销售总额"],
    "WHERE": ["销售额大于100万", "订单数量超过10","外贸部"],
    "GROUP BY": ["年份","城市", "公司"]
}

#### 示例用户问题 7：  
"销售额少于10万且订单数量超过100的每年各公司外贸部苏州市销售总额"  
#### 分词后的用户问题 7：
['销售额', '少于', '10万', '且', '订单', '数量', '超过', '100', '的', '每年', '各', '公司', '外贸部', '苏州市', '销售总额']
#### 示例输出 7：  
{
    "FROM": ["销售总额"],
    "WHERE": ["销售额少于10万", "订单数量超过100","外贸部","苏州市"],
    "GROUP BY": ["年份", "公司"]
}

#### 示例用户问题 8：  
"销售额等于1万且订单数量少于10的外贸部技术部每年各公司苏州市销售总额"  
#### 分词后的用户问题 8：
['销售额等于', '1万', '且', '订单', '数量', '少于', '10', '的', '外贸', '部', '技术部', '每年', '各', '公司', '苏州市', '销售总额']
#### 示例输出 8：  
{
    "FROM": ["销售总额"],
    "WHERE": ["销售额等于1万", "订单数量少于10","外贸部","技术部","苏州市"],
    "GROUP BY": ["年份", "公司"]
}

#### 示例用户问题 9：  
"八月各个公司外贸部销售部业务利率"  
#### 分词后的用户问题 9：
['八月', '各个', '公司', '外贸部', '销售部', '业务利率']
#### 示例输出 9：  
{
    "FROM": ["业务利率"],
    "WHERE": ["八月", "外贸部","销售部"],
    "GROUP BY": ["公司"]
}

#### 示例用户问题 10：  
"今年各个公司技术科打卡人数"  
#### 分词后的用户问题 10：
['今年', '各个', '公司', '技术', '科', '打卡人数']
#### 示例输出 10：  
{
    "FROM": ["打卡人数"],
    "WHERE": ["今年", "技术科"],
    "GROUP BY": ["公司"]
}


#### 示例用户问题 11：  
"今年技术科和安保科打卡人数"  
#### 分词后的用户问题 11：
['今年', '技术', '科', '和', '安保', '科', '打卡人数']
#### 示例输出 11：  
{
    "FROM": ["打卡人数"],
    "WHERE": ["今年", "技术科","安保科"],
    "GROUP BY": ["无"]
}

#### 示例用户问题 12：  
"今年各个公司技术科和安保科打卡人数"  
#### 分词后的用户问题 12：
['今年','各个', '公司','技术', '科', '和', '安保', '科', '打卡人数']
#### 示例输出 12：  
{
    "FROM": ["打卡人数"],
    "WHERE": ["今年", "技术科","安保科"],
    "GROUP BY": ["公司"]
}

#### 示例用户问题 13：
"我们科哪个医生看的病人最多"
#### 分词后的用户问题 13：
['我们科', '哪个', '医生', '看的病人最多',]
#### 示例输出 13：
{
    "FROM": ["看的病人最多"],
    "WHERE": ["我们科"],
    "GROUP BY": ["医生"]
}

#### 示例用户问题 14：
"2024年各月普外科住院人数多少"
#### 分词后的用户问题 14：
['2024年', '各', '月', '普外科', '住院人数', '多少']
#### 示例输出 13：
{
    "FROM": ["住院人数"],
    "WHERE": ["2024年", "普外科"],
    "GROUP BY": ["月"]
}

""" 
    res=""
    prompt=""

    try:
        prompt=get_prompt(user_input)
        res=send_llm_system(system_prompt,prompt)
        res_dict=json.loads(res)
        if "WHERE" in res.keys():
            if '无' in res["WHERE"]:
                res["WHERE"] = []
        if "GROUP BY" in res.keys():
            if '无' in res["GROUP BY"]:
                res["GROUP BY"] = []

        logger.info(f"--SQL识别：{res_dict}")
        return res_dict
    except Exception as e:
        print(e)
        result = extract_json_from_string(res)
        if "WHERE" in result.keys():
            if '无' in result["WHERE"]:
                result["WHERE"] = []
        if "GROUP BY" in result.keys():
            if '无' in result["GROUP BY"]:
                result["GROUP BY"] = []
        logger.info(f"--SQL识别：{result}")
        return result





